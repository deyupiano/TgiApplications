
@model TgiApplications.ViewModels.ItemVM
@{
    ViewBag.Title = "Create Items";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    int id = ViewBag.ItmTyp;
}
<link href="~/Content/cropper.min.css" rel="stylesheet" />
<h2>Create New Item</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.ItemName, htmlAttributes: new
        {
            @class =
       "control-label col-md-2"
        })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ItemName, new
       {
           htmlAttributes = new
           { @class = "form-control", @id = "ItemName" }
       })
            @Html.HiddenFor(model => model.ItemId, new { htmlAttributes = new { @id = "ItemId", @name = "ItemId" } })
            @Html.ValidationMessageFor(model => model.ItemName, "", new
            {
                @class
           = "text-danger"
            })
        </div>

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ItemCategoryId, htmlAttributes: new
        {
            @class =
       "control-label col-md-2"
        })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.ItemCategoryId, ViewBag.ItemICList as SelectList, "Select Item Category", new { @class = "form-control", @id = "ItemCategoryId" })
            @Html.ValidationMessageFor(model => model.ItemCategoryId, "", new
            {
                @class
           = "text-danger"
            })
        </div>

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Id, htmlAttributes: new
        {
            @class =
       "control-label col-md-2"
        })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Id, ViewBag.CategoryList as SelectList, "Select Category", new { @class = "form-control", @id = "Id" })
            @Html.ValidationMessageFor(model => model.Id, "", new
            {
                @class
           = "text-danger"
            })
        </div>

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ItemImage, htmlAttributes: new
        {
            @class =
       "control-label col-md-2"
        })
        <div class="col-md-10">
            <img id="uImage" class="img" src="~/UploadedImages/@Model.ItemImage" />
            @Html.EditorFor(model => model.ItemImage, new { htmlAttributes = new { @class = "form-control", @id = "imageData", @disabled = "disabled", @name = "ItemImage" } })

            @Html.ValidationMessageFor(model => model.ItemImage, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new
        {
            @class =
       "control-label col-md-2"
        })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ItemDescription, new
       {
           htmlAttributes = new
           { @class = "form-control", @id = "ItemDescription" }
       })
            @Html.ValidationMessageFor(model => model.ItemDescription, "", new
            {
                @class
           = "text-danger"
            })
        </div>

    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnSubmit" type="button" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}
<div>
    @Html.ActionLink("Back to List", "Items")
</div>
<!-- image cropping -->
<div class="container cropper">
    <div class="row">
        <div class="col-md-9">
            <div id="imageBox" class="img-container">
                <img id="image" src="~/Content/images/cropper.jpg" alt="Picture">
            </div>
        </div>
        <div class="col-md-3">
            <div class="docs-preview clearfix">
                <div class="img-preview preview-lg"></div>
                <div class="img-preview preview-md"></div>
                <div class="img-preview preview-sm"></div>
                <div class="img-preview preview-xs"></div>
            </div>

            <div class="docs-data">
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataX">X</label>
                    <input type="text" class="form-control" id="dataX" placeholder="x">
                    <span class="input-group-addon">px</span>
                </div>
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataY">Y</label>
                    <input type="text" class="form-control" id="dataY" placeholder="y">
                    <span class="input-group-addon">px</span>
                </div>
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataWidth">Width</label>
                    <input type="text" class="form-control" id="dataWidth" placeholder="width">
                    <span class="input-group-addon">px</span>
                </div>
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataHeight">Height</label>
                    <input type="text" class="form-control" id="dataHeight" placeholder="height">
                    <span class="input-group-addon">px</span>
                </div>
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataRotate">Rotate</label>
                    <input type="text" class="form-control" id="dataRotate" placeholder="rotate">
                    <span class="input-group-addon">deg</span>
                </div>
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataScaleX">ScaleX</label>
                    <input type="text" class="form-control" id="dataScaleX" placeholder="scaleX">
                </div>
                <div class="input-group input-group-sm">
                    <label class="input-group-addon" for="dataScaleY">ScaleY</label>
                    <input type="text" class="form-control" id="dataScaleY" placeholder="scaleY">
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-9 docs-buttons">
            <!-- <h3 class="page-header">Toolbar:</h3> -->
            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="setDragMode" data-option="move" title="Move">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setDragMode&quot;, &quot;move&quot;)">
                        <span class="fa fa-arrows"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="setDragMode" data-option="crop" title="Crop">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setDragMode&quot;, &quot;crop&quot;)">
                        <span class="fa fa-crop"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="zoom" data-option="0.1" title="Zoom In">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;zoom&quot;, 0.1)">
                        <span class="fa fa-search-plus"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="zoom" data-option="-0.1" title="Zoom Out">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;zoom&quot;, -0.1)">
                        <span class="fa fa-search-minus"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="move" data-option="-10" data-second-option="0" title="Move Left">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;move&quot;, -10, 0)">
                        <span class="fa fa-arrow-left"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="move" data-option="10" data-second-option="0" title="Move Right">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;move&quot;, 10, 0)">
                        <span class="fa fa-arrow-right"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="move" data-option="0" data-second-option="-10" title="Move Up">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;move&quot;, 0, -10)">
                        <span class="fa fa-arrow-up"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="move" data-option="0" data-second-option="10" title="Move Down">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;move&quot;, 0, 10)">
                        <span class="fa fa-arrow-down"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="rotate" data-option="-45" title="Rotate Left">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;rotate&quot;, -45)">
                        <span class="fa fa-rotate-left"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="rotate" data-option="45" title="Rotate Right">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;rotate&quot;, 45)">
                        <span class="fa fa-rotate-right"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="scaleX" data-option="-1" title="Flip Horizontal">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;scaleX&quot;, -1)">
                        <span class="fa fa-arrows-h"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="scaleY" data-option="-1" title="Flip Vertical">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;scaleY&quot;, -1)">
                        <span class="fa fa-arrows-v"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="crop" title="Crop">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;crop&quot;)">
                        <span class="fa fa-check"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="clear" title="Clear">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;clear&quot;)">
                        <span class="fa fa-remove"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="disable" title="Disable">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;disable&quot;)">
                        <span class="fa fa-lock"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="enable" title="Enable">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;enable&quot;)">
                        <span class="fa fa-unlock"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary" data-method="reset" title="Reset">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;reset&quot;)">
                        <span class="fa fa-refresh"></span>
                    </span>
                </button>
                <label class="btn btn-primary btn-upload" for="inputImage" title="Upload image file">
                    <input type="file" class="sr-only" id="inputImage" name="file" accept="image/*">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Import image with Blob URLs">
                        <span class="fa fa-upload"></span>
                    </span>
                </label>
                <button type="button" class="btn btn-primary" data-method="destroy" title="Destroy">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;destroy&quot;)">
                        <span class="fa fa-power-off"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group btn-group-crop">
                <button type="button" class="btn btn-primary" data-method="getCroppedCanvas">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getCroppedCanvas&quot;)">
                        Get Cropped Canvas
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="getCroppedCanvas" data-option="{ &quot;width&quot;: 160, &quot;height&quot;: 90 }">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getCroppedCanvas&quot;, { width: 160, height: 90 })">
                        160&times;90
                    </span>
                </button>
                <button type="button" class="btn btn-primary" data-method="getCroppedCanvas" data-option="{ &quot;width&quot;: 320, &quot;height&quot;: 180 }">
                    <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getCroppedCanvas&quot;, { width: 320, height: 180 })">
                        320&times;180
                    </span>
                </button>
            </div>

            <!-- Show the cropped image in modal -->
            <div class="modal fade docs-cropped" id="getCroppedCanvasModal" aria-hidden="true" aria-labelledby="getCroppedCanvasTitle" role="dialog" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title" id="getCroppedCanvasTitle">Cropped</h4>
                        </div>
                        <div class="modal-body"></div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <a class="btn btn-primary" id="download" href="javascript:void(0);" download="cropped.png">Download</a>
                        </div>
                    </div>
                </div>
            </div><!-- /.modal -->

            <button type="button" class="btn btn-primary" data-method="getData" data-option data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getData&quot;)">
                    Get Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="setData" data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setData&quot;, data)">
                    Set Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="getContainerData" data-option data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getContainerData&quot;)">
                    Get Container Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="getImageData" data-option data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getImageData&quot;)">
                    Get Image Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="getCanvasData" data-option data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getCanvasData&quot;)">
                    Get Canvas Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="setCanvasData" data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setCanvasData&quot;, data)">
                    Set Canvas Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="getCropBoxData" data-option data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getCropBoxData&quot;)">
                    Get Crop Box Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="setCropBoxData" data-target="#putData">
                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setCropBoxData&quot;, data)">
                    Set Crop Box Data
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="moveTo" data-option="0">
                <span class="docs-tooltip" data-toggle="tooltip" title="cropper.moveTo(0)">
                    0,0
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="zoomTo" data-option="1">
                <span class="docs-tooltip" data-toggle="tooltip" title="cropper.zoomTo(1)">
                    100%
                </span>
            </button>
            <button type="button" class="btn btn-primary" data-method="rotateTo" data-option="180">
                <span class="docs-tooltip" data-toggle="tooltip" title="cropper.rotateTo(180)">
                    180°
                </span>
            </button>
            <input type="text" class="form-control" id="putData" placeholder="Get data to here or set data with this value">
        </div><!-- /.docs-buttons -->

        <div class="col-md-3 docs-toggles">
            <!-- <h3 class="page-header">Toggles:</h3> -->
            <div class="btn-group btn-group-justified" data-toggle="buttons">
                <label class="btn btn-primary active">
                    <input type="radio" class="sr-only" id="aspectRatio0" name="aspectRatio" value="1.7777777777777777">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 16 / 9">
                        16:9
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="aspectRatio1" name="aspectRatio" value="1.3333333333333333">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 4 / 3">
                        4:3
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="aspectRatio2" name="aspectRatio" value="1">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 1 / 1">
                        1:1
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="aspectRatio3" name="aspectRatio" value="0.6666666666666666">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 2 / 3">
                        2:3
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="aspectRatio4" name="aspectRatio" value="NaN">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: NaN">
                        Free
                    </span>
                </label>
            </div>

            <div class="btn-group btn-group-justified" data-toggle="buttons">
                <label class="btn btn-primary active">
                    <input type="radio" class="sr-only" id="viewMode0" name="viewMode" value="0" checked>
                    <span class="docs-tooltip" data-toggle="tooltip" title="View Mode 0">
                        VM0
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="viewMode1" name="viewMode" value="1">
                    <span class="docs-tooltip" data-toggle="tooltip" title="View Mode 1">
                        VM1
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="viewMode2" name="viewMode" value="2">
                    <span class="docs-tooltip" data-toggle="tooltip" title="View Mode 2">
                        VM2
                    </span>
                </label>
                <label class="btn btn-primary">
                    <input type="radio" class="sr-only" id="viewMode3" name="viewMode" value="3">
                    <span class="docs-tooltip" data-toggle="tooltip" title="View Mode 3">
                        VM3
                    </span>
                </label>
            </div>

            <div class="dropdown dropup docs-options">
                <button type="button" class="btn btn-primary btn-block dropdown-toggle" id="toggleOptions" data-toggle="dropdown" aria-expanded="true">
                    Toggle Options
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="toggleOptions" role="menu">
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="responsive" checked>
                            responsive
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="restore" checked>
                            restore
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="checkCrossOrigin" checked>
                            checkCrossOrigin
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="checkOrientation" checked>
                            checkOrientation
                        </label>
                    </li>

                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="modal" checked>
                            modal
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="guides" checked>
                            guides
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="center" checked>
                            center
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="highlight" checked>
                            highlight
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="background" checked>
                            background
                        </label>
                    </li>

                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="autoCrop" checked>
                            autoCrop
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="movable" checked>
                            movable
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="rotatable" checked>
                            rotatable
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="scalable" checked>
                            scalable
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="zoomable" checked>
                            zoomable
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="zoomOnTouch" checked>
                            zoomOnTouch
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="zoomOnWheel" checked>
                            zoomOnWheel
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="cropBoxMovable" checked>
                            cropBoxMovable
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="cropBoxResizable" checked>
                            cropBoxResizable
                        </label>
                    </li>
                    <li role="presentation">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="toggleDragModeOnDblclick" checked>
                            toggleDragModeOnDblclick
                        </label>
                    </li>
                </ul>
            </div><!-- /.dropdown -->

            <a class="btn btn-default btn-block" data-toggle="tooltip" href="https://fengyuanchen.github.io/cropperjs" title="Cropper without jQuery">Cropper.js</a>

        </div><!-- /.docs-toggles -->
    </div>
</div>
<!-- /image cropping -->
@section scripts{
    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/cropper.min.js"></script>
    <script>
        function failed() {
            console.error("The provided file couldn't be loaded as an Image media");
        }
        var encodedImgFromFileUpload,encodedCoppedImage;
        var ReadImage = function (file) {
            debugger
            var reader = new FileReader;
            var image = new Image;

            reader.readAsDataURL(file);
            reader.onload = function (_file) {
                image.src = _file.target.result;
                encodedImgFromFileUpload = _file.target.result;
                $("#imageData").val("");
                $("#imageData").val(encodedImgFromFileUpload);
                image.onload = function () {
                    debugger
                    height = this.height;
                    width = this.width;
                    type = file.type;
                    size = ~~(file.size / 1024) + " KB";
                    debugger
                    img = new Image();
                    //img.onload = draw;
                    img.onerror = failed;
                    img.src = encodedImgFromFileUpload;
                    //$('#imageBox').append($("<img />", { id: 'image', src: encodedImgFromFileUpload }));

                    var detail = "Filesize: " + size + " | Image width: " + width + " PX | Image height: " + height + " PX";
                    // $('#ImgDetail').append(detail);
                };
            };
        };

        function draw() {
            $('#divCanvas').html("");
            cv += '<canvas id="canvas" width="300" height="250"></canvas>';
            $('#divCanvas').append(cv);
            debugger;
            canvas = $("#canvas");
            context = canvas.get(0).getContext("2d");
            crop(this, "imageData");

            //context.drawImage(this, 0, 0, 565, 380);
        }
        $(document).ready(function () {

        });
    </script>
    <!-- Cropper -->
    <script>
        $(document).ready(function () {
                     var $ItmT = $("#Id");
            $ItmT.children().filter(function () {
                return this.value == @id;

            }).prop('selected', true);
            var $image = $('#image');
            var $download = $('#download');
            var $dataX = $('#dataX');
            var $dataY = $('#dataY');
            var $dataHeight = $('#dataHeight');
            var $dataWidth = $('#dataWidth');
            var $dataRotate = $('#dataRotate');
            var $dataScaleX = $('#dataScaleX');
            var $dataScaleY = $('#dataScaleY');
            var options = {
                aspectRatio: 16 / 9,
                preview: '.img-preview',
                crop: function (e) {
                    $dataX.val(Math.round(e.x));
                    $dataY.val(Math.round(e.y));
                    $dataHeight.val(Math.round(e.height));
                    $dataWidth.val(Math.round(e.width));
                    $dataRotate.val(e.rotate);
                    $dataScaleX.val(e.scaleX);
                    $dataScaleY.val(e.scaleY);
                }
            };


            // Tooltip
            //$('[data-toggle="tooltip"]').tooltip();


            // Cropper
            $image.on({
                'build.cropper': function (e) {
                    console.log(e.type);
                },
                'built.cropper': function (e) {
                    console.log(e.type);
                },
                'cropstart.cropper': function (e) {
                    console.log(e.type, e.action);
                },
                'cropmove.cropper': function (e) {
                    console.log(e.type, e.action);
                },
                'cropend.cropper': function (e) {
                    console.log(e.type, e.action);
                },
                'crop.cropper': function (e) {
                    console.log(e.type, e.x, e.y, e.width, e.height, e.rotate, e.scaleX, e.scaleY);
                },
                'zoom.cropper': function (e) {
                    console.log(e.type, e.ratio);
                }
            }).cropper(options);


            // Buttons
            if (!$.isFunction(document.createElement('canvas').getContext)) {
                $('button[data-method="getCroppedCanvas"]').prop('disabled', true);
            }

            if (typeof document.createElement('cropper').style.transition === 'undefined') {
                $('button[data-method="rotate"]').prop('disabled', true);
                $('button[data-method="scale"]').prop('disabled', true);
            }


            // Download
            if (typeof $download[0].download === 'undefined') {
                $download.addClass('disabled');
            }


            // Options
            $('.docs-toggles').on('change', 'input', function () {

                var $this = $(this);
                var name = $this.attr('name');
                var type = $this.prop('type');
                var cropBoxData;
                var canvasData;

                if (!$image.data('cropper')) {
                    return;
                }

                if (type === 'checkbox') {
                    options[name] = $this.prop('checked');
                    cropBoxData = $image.cropper('getCropBoxData');
                    canvasData = $image.cropper('getCanvasData');

                    options.built = function () {
                        $image.cropper('setCropBoxData', cropBoxData);
                        $image.cropper('setCanvasData', canvasData);
                    };
                } else if (type === 'radio') {
                    options[name] = $this.val();
                }

                $image.cropper('destroy').cropper(options);
            });


            // Methods
            $('.docs-buttons').on('click', '[data-method]', function () {
                var $this = $(this);
                var data = $this.data();
                var $target;
                var result;

                if ($this.prop('disabled') || $this.hasClass('disabled')) {
                    return;
                }

                if ($image.data('cropper') && data.method) {
                    data = $.extend({}, data); // Clone a new one
                    debugger
                    if (typeof data.target !== 'undefined') {
                        $target = $(data.target);
                        debugger
                        if (typeof data.option === 'undefined') {
                            try {
                                data.option = JSON.parse($target.val());
                            } catch (e) {
                                console.log(e.message);
                            }
                        }
                    }

                    result = $image.cropper(data.method, data.option, data.secondOption);

                    switch (data.method) {
                        case 'scaleX':
                        case 'scaleY':
                            $(this).data('option', -data.option);
                            break;

                        case 'getCroppedCanvas':
                            encodedCoppedImage = $image.cropper('getCroppedCanvas').toDataURL("image/png");
                            $("#imageData").val("");
                            $("#imageData").val(encodedCoppedImage);
                            debugger
                            //if (result) {

                            //    // Bootstrap's Modal
                            //    $('#getCroppedCanvasModal').modal().find('.modal-body').html(result);

                            //    if (!$download.hasClass('disabled')) {
                            //        $download.attr('href', result.toDataURL());
                            //    }
                            //}

                            break;
                    }

                    if ($.isPlainObject(result) && $target) {
                        try {
                            $target.val(JSON.stringify(result));
                        } catch (e) {
                            console.log(e.message);
                        }
                    }

                }
            });

            // Keyboard
            $(document.body).on('keydown', function (e) {
                if (!$image.data('cropper') || this.scrollTop > 300) {
                    return;
                }

                switch (e.which) {
                    case 37:
                        e.preventDefault();
                        $image.cropper('move', -1, 0);
                        break;

                    case 38:
                        e.preventDefault();
                        $image.cropper('move', 0, -1);
                        break;

                    case 39:
                        e.preventDefault();
                        $image.cropper('move', 1, 0);
                        break;

                    case 40:
                        e.preventDefault();
                        $image.cropper('move', 0, 1);
                        break;
                }
            });

            // Import image
            var $inputImage = $('#inputImage');
            var URL = window.URL || window.webkitURL;
            var blobURL;

            if (URL) {
                $inputImage.change(function () {
                    debugger
                    var files = this.files;
                    var file;

                    var File = this.files;
                    if (File && File[0]) {
                        ReadImage(File[0]);
                    }


                    if (!$image.data('cropper')) {
                        return;
                    }

                    if (files && files.length) {
                        file = files[0];
                        debugger
                        if (/^image\/\w+$/.test(file.type)) {
                            blobURL = URL.createObjectURL(file);
                            debugger
                            $image.one('built.cropper', function () {

                                // Revoke when load complete
                                URL.revokeObjectURL(blobURL);
                            }).cropper('reset').cropper('replace', blobURL);
                            $inputImage.val('');
                        } else {
                            window.alert('Please choose an image file.');
                        }
                    }
                });
            } else {
                $inputImage.prop('disabled', true).parent().addClass('disabled');
            }
        });
        var selectedCategory;
        $("#ServiceCategoryId").change(function () {

            selectedCategory = $(this).val();
            //alert(selectedCategory);
        });
        function postItem() {
            var isImg = $("#imageData").val();
            var eData;
            debugger
            if (isImg !== null || isImg !== "") {
                if (selectedCategory !== "") {
                    eData = {
                        ItemId: $("#ItemId").val(),
                        ItemImage: $("#imageData").val(),
                        ItemName: $("#ItemName").val(),
                        ItemCategoryId: $("#ItemCategoryId").val(),
                        ItemDescription: $("#ItemDescription").val(),
                        ServiceCategoryId: selectedCategory,
                    };
                } else {
                    eData = {
                        ItemId: $("#ItemId").val(),
                        ItemImage: $("#imageData").val(),
                        ItemName: $("#ItemName").val(),
                        ItemCategoryId: $("#ItemCategoryId").val(),
                        ItemDescription: $("#ItemDescription").val(),
                        ServiceCategoryId: $("#ServiceCategoryId").val(),
                    };
                }

            } else {
                if (selectedCategory !== "") {
                    eData = {
                        ItemId: $("#ItemId").val(),
                        ItemImage: "",
                        ItemName: $("#ItemName").val(),
                        ItemCategoryId: $("#ItemCategoryId").val(),
                        ItemDescription: $("#ItemDescription").val(),
                        ServiceCategoryId: selectedCategory,
                    };
                } else {
                    eData = {
                        ItemId: $("#ServiceId").val(),
                        ServiceImage: "",
                        ItemName: $("#ItemName").val(),
                        ItemCategoryId: $("#ItemCategoryId").val(),
                        ItemDescription: $("#ItemDescription").val(),
                        ServiceCategoryId: $("#ServiceCategoryId").val(),
                    };
                }
            }

            var editedData = JSON.stringify(eData);
            debugger
            $.ajax({
                url: '/Admin/EditItem?id=' + $("#ItemId").val(),
                type: 'POST',
                data: editedData,
                contentType: 'application/json;',
                dataType: 'json',
                success: function (result) {
                              if (result == true) {
                        window.location = "/Admin/Items";
                    }


                },
                error: function (err) {
                    alert("Error: " + err.responseText);
                }
            });
        }
        $("#btnSubmit").click(function () {
            postItem();
        });
    </script>
    <!-- /Cropper -->


}

